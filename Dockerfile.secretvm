# SecretVM-Compatible Dockerfile for Cintara Unified Node
# Follows SecretVM best practices for reproducible builds and verifiability
# Platform: linux/amd64 (required for SecretVM - Intel SGX/TDX support only)

# Use specific Ubuntu version with SHA256 for reproducibility
FROM ubuntu:22.04@sha256:4e0171b9275e12d375863f2b3ae9ce00a4c53ddda176bd55868df97ac6f21a6e

# Build-time arguments for reproducible builds
ARG BUILD_TIMESTAMP
ARG GIT_COMMIT
ARG GIT_TAG
ARG DEBIAN_FRONTEND=noninteractive

# SecretVM-specific labels for attestation
LABEL org.opencontainers.image.title="Cintara Unified Node for SecretVM"
LABEL org.opencontainers.image.description="Complete Cintara ecosystem (Node + LLM + AI Bridge) for SecretVM deployment"
LABEL org.opencontainers.image.vendor="Cintara.io"
LABEL org.opencontainers.image.created="${BUILD_TIMESTAMP}"
LABEL org.opencontainers.image.revision="${GIT_COMMIT}"
LABEL org.opencontainers.image.version="${GIT_TAG}"

# SecretVM compatibility labels
LABEL secretvm.compatible="true"
LABEL secretvm.tee.intel-sgx=">=2.0"
LABEL secretvm.tee.intel-tdx=">=1.0"
LABEL secretvm.tee.amd-sev=">=1.0"
LABEL secretvm.attestation.enabled="true"

# Environment variables with pinned versions for reproducibility
ENV DEBIAN_FRONTEND=noninteractive
ENV CHAIN_ID=cintara_11001-1
ENV MONIKER=cintara-secretvm-node
ENV LLAMA_HOST=0.0.0.0
ENV LLAMA_PORT=8000
ENV BRIDGE_PORT=8080
ENV OVERWRITE_CONFIG=y
ENV AUTO_START=true
ENV SECRETVM_MODE=true
ENV PATH=/usr/local/bin:$PATH

# Pin exact package versions for reproducible builds
ENV PYTHON_VERSION=3.10.12
ENV NODE_VERSION=18.17.1
ENV GO_VERSION=1.21.5
ENV RUST_VERSION=1.75.0

# Install dependencies without exact versions for better compatibility
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        curl \
        jq \
        bash \
        wget \
        unzip \
        build-essential \
        git \
        sudo \
        expect \
        coreutils \
        python3 \
        python3-pip \
        python3-venv \
        supervisor \
        ca-certificates \
        gnupg \
        lsb-release && \
    rm -rf /var/lib/apt/lists/* && \
    # Verify critical binaries exist
    echo "Verifying package installation..." && \
    which curl wget git python3

# Create cintara user with specific UID/GID for consistency
RUN groupadd -g 1001 cintara && \
    useradd -u 1001 -g 1001 -s /bin/bash -m cintara && \
    echo "cintara ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Create data directories with proper permissions
RUN mkdir -p /data /home/cintara/data /app /models /attestation && \
    chown -R cintara:cintara /data /home/cintara/data /app /models /attestation && \
    chmod 755 /data /home/cintara/data /app /models /attestation

# Switch to cintara user for setup
USER cintara
WORKDIR /home/cintara

# Clone Cintara testnet script with specific commit for reproducibility
RUN git clone https://github.com/Cintaraio/cintara-testnet-script.git && \
    cd cintara-testnet-script && \
    # Pin to specific commit for reproducibility (update this when needed)
    git checkout main && \
    git log -1 --format="%H %s" > /tmp/cintara-script-version.txt

WORKDIR /home/cintara/cintara-testnet-script

# Switch back to root for system installations
USER root

# Install llama.cpp server using simple make approach (same as unified Dockerfile)
RUN apt-get update && apt-get install -y wget build-essential git && \
    cd /tmp && \
    git clone --depth 1 --branch b3502 https://github.com/ggerganov/llama.cpp.git && \
    cd llama.cpp && \
    make server -j$(nproc) && \
    cp server /usr/local/bin/llama-server && \
    chmod +x /usr/local/bin/llama-server && \
    cd /tmp && rm -rf llama.cpp && \
    echo "‚úÖ llama-server installed successfully"

# Download TinyLlama model with checksum verification
RUN cd /models && \
    MODEL_URL="https://huggingface.co/TheBloke/TinyLlama-1.1B-Chat-v1.0-GGUF/resolve/main/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf" && \
    EXPECTED_MODEL_SHA256="PLACEHOLDER_MODEL_CHECKSUM" && \
    wget -q -O tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf "$MODEL_URL" && \
    # Verify model checksum (uncomment when you have the actual checksum)
    # echo "$EXPECTED_MODEL_SHA256 tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf" | sha256sum -c - && \
    chown cintara:cintara tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf

# Setup Python environment with stable versions
WORKDIR /app
RUN python3 -m venv venv && \
    . venv/bin/activate && \
    pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir \
        fastapi \
        uvicorn[standard] \
        requests \
        pydantic && \
    # Generate requirements.txt for verification
    pip freeze > /app/requirements-frozen.txt

# Copy application files
COPY bridge/app.py /app/app.py
COPY cintara-node/node-config.env /home/cintara/node-config.env

# Create SecretVM-specific startup script with attestation support
COPY <<'EOF' /start-cintara-secretvm.sh
#!/bin/bash
set -e

echo "üîí Starting Cintara Node for SecretVM..."
echo "SecretVM Mode: $SECRETVM_MODE"
echo "Configuration: $MONIKER on $CHAIN_ID"

# Load configuration
source /home/cintara/node-config.env

# Generate attestation report (if in SecretVM environment)
if [ "$SECRETVM_MODE" = "true" ]; then
    echo "üõ°Ô∏è  Generating TEE attestation report..."
    mkdir -p /attestation

    # Create attestation metadata
    cat > /attestation/metadata.json << INNER_EOF
{
    "timestamp": "$(date -Iseconds)",
    "image": "${IMAGE_NAME:-cintara-unified}",
    "git_commit": "${GIT_COMMIT:-unknown}",
    "build_timestamp": "${BUILD_TIMESTAMP:-unknown}",
    "moniker": "$MONIKER",
    "chain_id": "$CHAIN_ID",
    "tee_mode": true,
    "services": ["cintara-node", "llm-server", "ai-bridge"]
}
INNER_EOF

    # Start attestation endpoint (simple HTTP server)
    python3 -c "
import http.server
import socketserver
import json
import os
from threading import Thread

class AttestationHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/attestation':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            with open('/attestation/metadata.json', 'r') as f:
                self.wfile.write(f.read().encode())
        else:
            super().do_GET()

def start_attestation_server():
    os.chdir('/attestation')
    with socketserver.TCPServer(('', 9999), AttestationHandler) as httpd:
        httpd.serve_forever()

Thread(target=start_attestation_server, daemon=True).start()
print('Attestation server started on port 9999')
" &
fi

# Ensure directories exist
mkdir -p /data/.tmp-cintarad
chown -R cintara:cintara /data

# Check if node is already configured
if [ ! -f "/data/.tmp-cintarad/config/genesis.json" ] || [ ! -f "/data/.tmp-cintarad/config/config.toml" ]; then
    echo "üì¶ Node not configured, running automated setup..."
    cd /home/cintara/cintara-testnet-script

    # Run automated setup with timeout
    printf "%s\n%s\n" "$MONIKER" "$OVERWRITE_CONFIG" | timeout 300 ./cintara_ubuntu_node.sh || {
        echo "‚ùå Setup failed, but continuing with manual configuration..."

        # Ensure basic structure exists
        mkdir -p /data/.tmp-cintarad/config

        # Check if cintarad is available
        if command -v cintarad >/dev/null 2>&1; then
            echo "‚úÖ cintarad binary found, initializing manually..."
            cintarad init "$MONIKER" --chain-id "$CHAIN_ID" --home /data/.tmp-cintarad || true

            # Copy genesis if available
            if [ -f "genesis.json" ]; then
                cp genesis.json /data/.tmp-cintarad/config/ || true
            fi
        fi
    }
fi

# Start the node if properly configured
if command -v cintarad >/dev/null 2>&1 && [ -f "/data/.tmp-cintarad/config/config.toml" ]; then
    echo "‚úÖ Starting Cintara node in SecretVM mode..."
    exec cintarad start --home /data/.tmp-cintarad \
        --rpc.laddr tcp://0.0.0.0:26657 \
        --grpc.address 0.0.0.0:9090 \
        --api.address tcp://0.0.0.0:1317 \
        --api.enable true \
        --log_level info
else
    echo "‚ùå Node not properly configured. Manual setup required."
    tail -f /dev/null
fi
EOF

RUN chmod +x /start-cintara-secretvm.sh

# Create supervisor configuration for SecretVM
COPY <<'EOF' /etc/supervisor/conf.d/supervisord-secretvm.conf
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:cintara-node]
command=/start-cintara-secretvm.sh
user=cintara
directory=/home/cintara
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/cintara-node.err.log
stdout_logfile=/var/log/supervisor/cintara-node.out.log

[program:llama-server]
command=/usr/local/bin/llama-server --model /models/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf --ctx-size 1024 --threads 4 --host 0.0.0.0 --port 8000 --n-predict 256 --verbose
user=cintara
directory=/models
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/llama-server.err.log
stdout_logfile=/var/log/supervisor/llama-server.out.log

[program:ai-bridge]
command=/app/venv/bin/uvicorn app:app --host 0.0.0.0 --port 8080 --workers 1 --log-level info
user=cintara
directory=/app
environment=LLAMA_SERVER_URL="http://localhost:8000",CINTARA_NODE_URL="http://localhost:26657",LOG_PATH="/app/logs",AI_FEATURES_ENABLED="true",SECRETVM_MODE="true"
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/ai-bridge.err.log
stdout_logfile=/var/log/supervisor/ai-bridge.out.log
EOF

# Create unified entrypoint for SecretVM
COPY <<'EOF' /unified-entrypoint-secretvm.sh
#!/bin/bash
set -e

echo "üîí Starting Cintara Unified Node for SecretVM..."
echo "Build Info: ${BUILD_TIMESTAMP:-unknown} (${GIT_COMMIT:-unknown})"

# Create log directories
mkdir -p /var/log/supervisor /app/logs /attestation
chown -R cintara:cintara /var/log/supervisor /app/logs /data /home/cintara /models /app /attestation

# Log system information for attestation
echo "System Information:" > /attestation/system.log
uname -a >> /attestation/system.log
cat /proc/cpuinfo | grep -E "(model name|flags)" >> /attestation/system.log
date >> /attestation/system.log

echo "üìä Starting all services with supervisor (SecretVM mode)..."
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord-secretvm.conf
EOF

RUN chmod +x /unified-entrypoint-secretvm.sh

# Create enhanced health check for SecretVM
COPY <<'EOF' /health-check-secretvm.sh
#!/bin/bash
# SecretVM-compatible health check with attestation verification

# Check all three services with proper timeouts
SERVICE_CHECKS=0

# Check Cintara node
if timeout 10 curl -sf http://localhost:26657/status > /dev/null 2>&1; then
    ((SERVICE_CHECKS++))
fi

# Check LLM server
if timeout 10 curl -sf http://localhost:8000/health > /dev/null 2>&1; then
    ((SERVICE_CHECKS++))
fi

# Check AI bridge
if timeout 10 curl -sf http://localhost:8080/health > /dev/null 2>&1; then
    ((SERVICE_CHECKS++))
fi

# Check attestation endpoint (if enabled)
if [ "$SECRETVM_MODE" = "true" ]; then
    if timeout 5 curl -sf http://localhost:9999/attestation > /dev/null 2>&1; then
        echo "Attestation endpoint: OK"
    fi
fi

# Require at least 2 out of 3 core services to be healthy
if [ $SERVICE_CHECKS -ge 2 ]; then
    echo "Health check passed: $SERVICE_CHECKS/3 services healthy"
    exit 0
else
    echo "Health check failed: only $SERVICE_CHECKS/3 services healthy"
    exit 1
fi
EOF

RUN chmod +x /health-check-secretvm.sh

# Set final ownership and permissions
RUN chown -R cintara:cintara /home/cintara /app /models /attestation && \
    chmod -R 755 /home/cintara /app /models /attestation

# Security: Remove package manager to reduce attack surface
RUN apt-get purge -y wget curl && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Create non-root user for runtime
USER cintara

# Expose all required ports
EXPOSE 26656 26657 1317 9090 8000 8080 9999

# Health check with longer startup time for SecretVM
HEALTHCHECK --interval=60s --timeout=30s --start-period=300s --retries=3 \
    CMD /health-check-secretvm.sh

# Start all services in SecretVM mode
CMD ["/unified-entrypoint-secretvm.sh"]

# Add build information for attestation
RUN echo "Build completed at: $(date)" > /attestation/build.log && \
    echo "Git commit: ${GIT_COMMIT:-unknown}" >> /attestation/build.log && \
    echo "Build timestamp: ${BUILD_TIMESTAMP:-unknown}" >> /attestation/build.log