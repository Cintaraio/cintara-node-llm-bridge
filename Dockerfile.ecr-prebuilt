# ECR Pre-built Image - No Interactive Prompts, Working Services
FROM ubuntu:22.04

# Build arguments
ARG BUILD_TIMESTAMP
ARG TARGET_ARCH=x86_64
ARG DEFAULT_PASSWORD=SecureNodePassword123!

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV CHAIN_ID=cintara_11001-1
ENV MONIKER=cintara-secretvm-node
ENV OVERWRITE_CONFIG=y
ENV AUTO_START=true
ENV TARGET_ARCH=${TARGET_ARCH}
ENV DEFAULT_NODE_PASSWORD=${DEFAULT_PASSWORD}

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    build-essential \
    ca-certificates \
    jq \
    bash \
    unzip \
    expect \
    python3 \
    python3-pip \
    python3-venv \
    supervisor \
    netcat \
    && rm -rf /var/lib/apt/lists/*

# Create cintara user
RUN useradd -ms /bin/bash cintara && \
    echo "cintara ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Create directories
RUN mkdir -p /data /home/cintara/data /app /models /var/log/supervisor && \
    chown -R cintara:cintara /data /home/cintara/data /app /models

# Setup Python environment for AI bridge
WORKDIR /app
RUN python3 -m venv venv && \
    . venv/bin/activate && \
    pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir \
        fastapi==0.104.1 \
        uvicorn[standard]==0.24.0 \
        requests==2.31.0 \
        pydantic==2.5.0

# Copy AI bridge application
COPY bridge/app.py /app/app.py

# Copy and install LLM server stub
COPY scripts/llama-server-stub.sh /usr/local/bin/llama-server
RUN chmod +x /usr/local/bin/llama-server

# Clone cintara testnet script
USER cintara
WORKDIR /home/cintara
RUN git clone https://github.com/Cintaraio/cintara-testnet-script.git

# Pre-configure node during build (non-interactive)
USER root
WORKDIR /home/cintara/cintara-testnet-script

# Copy configuration file
COPY --chown=cintara:cintara cintara-node/node-config.env /home/cintara/node-config.env

# Pre-setup node with fixed responses (no interactive prompts)
RUN chown -R cintara:cintara /home/cintara /data && \
    echo "Pre-configuring Cintara node during build..." && \
    su - cintara -c "cd /home/cintara/cintara-testnet-script && \
    source /home/cintara/node-config.env && \
    timeout 600 bash -c 'echo -e \"${MONIKER}\n${OVERWRITE_CONFIG}\n${DEFAULT_NODE_PASSWORD}\n${DEFAULT_NODE_PASSWORD}\" | ./cintara_ubuntu_node.sh 2>/dev/null' || \
    echo 'Pre-configuration attempted, will configure at runtime if needed'" && \
    echo "Node pre-configuration completed"

# Copy and install Cintara node startup script
COPY scripts/start-cintara-node.sh /usr/local/bin/start-cintara-node.sh
RUN chmod +x /usr/local/bin/start-cintara-node.sh

# Copy supervisor configuration
COPY config/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Copy entrypoint script
COPY scripts/unified-entrypoint.sh /unified-entrypoint.sh
RUN chmod +x /unified-entrypoint.sh

# Copy health check script
COPY scripts/health-check.sh /health-check.sh
RUN chmod +x /health-check.sh

# Set final ownership
RUN chown -R cintara:cintara /home/cintara /app /models

# Add build metadata
RUN echo "Build timestamp: ${BUILD_TIMESTAMP}" > /build-info.txt && \
    echo "Target architecture: ${TARGET_ARCH}" >> /build-info.txt && \
    echo "Built for: SecretVM via ECR" >> /build-info.txt && \
    echo "Password configurable: CINTARA_NODE_PASSWORD" >> /build-info.txt

# Expose ports
EXPOSE 26656 26657 1317 9090 8000 8080

# Health check with realistic timing
HEALTHCHECK --interval=60s --timeout=30s --start-period=120s --retries=3 \
    CMD /health-check.sh

# Start all services
CMD ["/unified-entrypoint.sh"]