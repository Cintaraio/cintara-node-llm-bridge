# Clean Unified Cintara Container for Secret Network
FROM ubuntu:22.04

# Prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    build-essential \
    python3 \
    python3-pip \
    python3-venv \
    supervisor \
    jq \
    unzip \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Create application and data directories
WORKDIR /app
RUN mkdir -p /data /models /app/logs /home/cintara/.secretd

# Install Go (required for Cintara node)
ENV GO_VERSION=1.21.3
RUN wget https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz && \
    rm go${GO_VERSION}.linux-amd64.tar.gz

ENV PATH=$PATH:/usr/local/go/bin
ENV GOPATH=/go
ENV PATH=$PATH:$GOPATH/bin

# Download pre-built Secret Network binary
RUN ARCH=$(dpkg --print-architecture) && \
    wget -O /tmp/secretd.deb "https://github.com/scrtlabs/SecretNetwork/releases/download/v1.12.1/secretnetwork_1.12.1_${ARCH}.deb" && \
    dpkg -i /tmp/secretd.deb || apt-get install -f -y && \
    rm -f /tmp/secretd.deb && \
    echo "✅ Secret Network node installed successfully"

# Install LLaMA.cpp server
RUN git clone https://github.com/ggerganov/llama.cpp.git /tmp/llama.cpp && \
    cd /tmp/llama.cpp && \
    make server -j$(nproc) && \
    cp server /usr/local/bin/llama-server && \
    chmod +x /usr/local/bin/llama-server && \
    rm -rf /tmp/llama.cpp && \
    echo "✅ LLM server built successfully"

# Create Python virtual environment
RUN python3 -m venv /app/venv
ENV PATH="/app/venv/bin:$PATH"

# Install Python dependencies
RUN pip install --no-cache-dir \
    fastapi==0.104.1 \
    uvicorn[standard]==0.24.0 \
    requests==2.31.0 \
    pydantic==2.5.0

# Download TinyLlama model
RUN wget -O /models/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf \
    "https://huggingface.co/TheBloke/TinyLlama-1.1B-Chat-v1.0-GGUF/resolve/main/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf" && \
    echo "✅ Model downloaded successfully"

# Create cintara user
RUN useradd -m -s /bin/bash cintara && \
    chown -R cintara:cintara /home/cintara /data /models /app

# Copy AI Bridge application (simplified version without TaxBit)
COPY bridge/app.py /app/app.py

# Create supervisor configuration
RUN echo '[supervisord]\n\
nodaemon=true\n\
user=root\n\
logfile=/var/log/supervisor/supervisord.log\n\
pidfile=/var/run/supervisord.pid\n\
\n\
[program:secret-node]\n\
command=/usr/local/bin/secretd start --home /home/cintara/.secretd\n\
user=cintara\n\
directory=/home/cintara\n\
autostart=true\n\
autorestart=true\n\
stderr_logfile=/var/log/supervisor/secret-node.err.log\n\
stdout_logfile=/var/log/supervisor/secret-node.out.log\n\
environment=HOME="/home/cintara"\n\
\n\
[program:llama-server]\n\
command=/usr/local/bin/llama-server --model /models/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf --host 0.0.0.0 --port 8000 --ctx-size 512 --threads 2\n\
user=cintara\n\
directory=/models\n\
autostart=true\n\
autorestart=true\n\
stderr_logfile=/var/log/supervisor/llama-server.err.log\n\
stdout_logfile=/var/log/supervisor/llama-server.out.log\n\
\n\
[program:ai-bridge]\n\
command=/app/venv/bin/uvicorn app:app --host 0.0.0.0 --port 8080\n\
user=cintara\n\
directory=/app\n\
environment=LLAMA_SERVER_URL="http://localhost:8000",CINTARA_NODE_URL="http://localhost:26657"\n\
autostart=true\n\
autorestart=true\n\
stderr_logfile=/var/log/supervisor/ai-bridge.err.log\n\
stdout_logfile=/var/log/supervisor/ai-bridge.out.log' > /etc/supervisor/conf.d/supervisord.conf

# Create initialization script
RUN echo '#!/bin/bash\n\
set -e\n\
echo "🔧 Initializing Secret Network Node..."\n\
\n\
# Set environment variables\n\
export HOME=/home/cintara\n\
export MONIKER=${MONIKER:-secret-node}\n\
export CHAIN_ID=${CHAIN_ID:-secret-4}\n\
\n\
# Initialize node if not already done\n\
if [ ! -f "/home/cintara/.secretd/config/config.toml" ]; then\n\
    echo "🎯 First-time initialization..."\n\
    su - cintara -c "secretd init $MONIKER --chain-id $CHAIN_ID --home /home/cintara/.secretd"\n\
    \n\
    # Download genesis if URL provided\n\
    if [ ! -z "$GENESIS_URL" ]; then\n\
        echo "📥 Downloading genesis..."\n\
        wget -O /home/cintara/.secretd/config/genesis.json "$GENESIS_URL"\n\
    fi\n\
    \n\
    # Set peers if provided\n\
    if [ ! -z "$PERSISTENT_PEERS" ]; then\n\
        echo "🌐 Setting persistent peers..."\n\
        sed -i "s/persistent_peers = \"\"/persistent_peers = \"$PERSISTENT_PEERS\"/g" /home/cintara/.secretd/config/config.toml\n\
    fi\n\
    \n\
    echo "✅ Node initialized successfully"\n\
else\n\
    echo "✅ Node already initialized"\n\
fi\n\
\n\
# Fix permissions\n\
chown -R cintara:cintara /home/cintara /data /app /models\n\
\n\
echo "🚀 Starting all services..."' > /app/init.sh

RUN chmod +x /app/init.sh

# Create startup script
RUN echo '#!/bin/bash\n\
set -e\n\
echo "🚀 Starting Secret Network Unified Container..."\n\
\n\
# Run initialization\n\
/app/init.sh\n\
\n\
# Start supervisor\n\
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf' > /app/start.sh

RUN chmod +x /app/start.sh

# Create health check script
RUN echo '#!/bin/bash\n\
# Check all services\n\
supervisorctl status | grep -q "RUNNING" || exit 1\n\
curl -f http://localhost:26657/status > /dev/null 2>&1 || exit 1\n\
curl -f http://localhost:8000/health > /dev/null 2>&1 || exit 1\n\
curl -f http://localhost:8080/health > /dev/null 2>&1 || exit 1\n\
echo "All services healthy"' > /app/health-check.sh

RUN chmod +x /app/health-check.sh

# Expose all required ports
EXPOSE 26656 26657 1317 9090 8000 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=120s --retries=3 \
    CMD /app/health-check.sh

# Start services
ENTRYPOINT ["/app/start.sh"]