# SecretVM Simple Dockerfile - Focuses on getting services running
FROM ubuntu:22.04

# Build arguments
ARG BUILD_TIMESTAMP
ARG TARGET_ARCH=x86_64

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV CHAIN_ID=cintara_11001-1
ENV MONIKER=cintara-secretvm-node
ENV OVERWRITE_CONFIG=y
ENV AUTO_START=true
ENV TARGET_ARCH=${TARGET_ARCH}

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    build-essential \
    ca-certificates \
    jq \
    bash \
    python3 \
    python3-pip \
    python3-venv \
    supervisor \
    netcat \
    && rm -rf /var/lib/apt/lists/*

# Create cintara user
RUN useradd -ms /bin/bash cintara && \
    echo "cintara ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Create directories
RUN mkdir -p /data /home/cintara/data /app /models /var/log/supervisor && \
    chown -R cintara:cintara /data /home/cintara/data /app /models

# Setup Python environment for AI bridge
WORKDIR /app
RUN python3 -m venv venv && \
    . venv/bin/activate && \
    pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir \
        fastapi==0.104.1 \
        uvicorn[standard]==0.24.0 \
        requests==2.31.0 \
        pydantic==2.5.0

# Copy AI bridge application
COPY bridge/app.py /app/app.py

# Create simple LLM server stub (since compilation fails)
RUN echo '#!/bin/bash' > /usr/local/bin/llama-server && \
    echo 'echo "Starting LLM placeholder server on port 8000..."' >> /usr/local/bin/llama-server && \
    echo 'while true; do' >> /usr/local/bin/llama-server && \
    echo '    echo -e "HTTP/1.1 200 OK\\r\\nContent-Type: application/json\\r\\n\\r\\n{\\\"status\\\":\\\"placeholder\\\",\\\"model\\\":\\\"stub\\\"}" | nc -l -p 8000 -q 1 2>/dev/null || sleep 5' >> /usr/local/bin/llama-server && \
    echo 'done' >> /usr/local/bin/llama-server && \
    chmod +x /usr/local/bin/llama-server

# Create simple Cintara node stub
RUN echo '#!/bin/bash' > /usr/local/bin/cintara-stub && \
    echo 'echo "Starting Cintara node placeholder on port 26657..."' >> /usr/local/bin/cintara-stub && \
    echo 'while true; do' >> /usr/local/bin/cintara-stub && \
    echo '    echo -e "HTTP/1.1 200 OK\\r\\nContent-Type: application/json\\r\\n\\r\\n{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"result\\\":{\\\"node_info\\\":{\\\"network\\\":\\\"cintara_11001-1\\\",\\\"moniker\\\":\\\"cintara-secretvm-node\\\"}}}" | nc -l -p 26657 -q 1 2>/dev/null || sleep 5' >> /usr/local/bin/cintara-stub && \
    echo 'done' >> /usr/local/bin/cintara-stub && \
    chmod +x /usr/local/bin/cintara-stub

# Create supervisor configuration
COPY <<EOF /etc/supervisor/conf.d/supervisord.conf
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:cintara-node]
command=/usr/local/bin/cintara-stub
user=cintara
directory=/home/cintara
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/cintara-node.err.log
stdout_logfile=/var/log/supervisor/cintara-node.out.log

[program:llama-server]
command=/usr/local/bin/llama-server
user=cintara
directory=/models
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/llama-server.err.log
stdout_logfile=/var/log/supervisor/llama-server.out.log

[program:ai-bridge]
command=/app/venv/bin/uvicorn app:app --host 0.0.0.0 --port 8080 --workers 1 --log-level info
user=cintara
directory=/app
environment=LLAMA_SERVER_URL="http://localhost:8000",CINTARA_NODE_URL="http://localhost:26657",LOG_PATH="/app/logs",AI_FEATURES_ENABLED="true"
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/ai-bridge.err.log
stdout_logfile=/var/log/supervisor/ai-bridge.out.log
EOF

# Create entrypoint script
COPY <<EOF /unified-entrypoint.sh
#!/bin/bash
set -e

echo "üöÄ Starting Cintara Unified Node (SecretVM Simple)"
echo "üèóÔ∏è  Built at: \${BUILD_TIMESTAMP:-unknown}"
echo "üéØ Target Architecture: \${TARGET_ARCH:-x86_64}"
echo ""

# Create necessary directories
mkdir -p /var/log/supervisor /app/logs /data
chown -R cintara:cintara /var/log/supervisor /app/logs /data /home/cintara /models /app

# Start supervisor
echo "üìä Starting all services with supervisor..."
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
EOF

RUN chmod +x /unified-entrypoint.sh

# Create health check script
COPY <<EOF /health-check.sh
#!/bin/bash
echo "üîç Checking service health..."

# Check each service with timeout
if timeout 10 curl -sf http://localhost:26657/status > /dev/null 2>&1; then
    echo "‚úÖ Cintara node: healthy"
else
    echo "‚ö†Ô∏è Cintara node: placeholder mode"
fi

if timeout 10 curl -sf http://localhost:8000 > /dev/null 2>&1; then
    echo "‚úÖ LLM server: healthy"
else
    echo "‚ö†Ô∏è LLM server: placeholder mode"
fi

if timeout 10 curl -sf http://localhost:8080/health > /dev/null 2>&1; then
    echo "‚úÖ AI bridge: healthy"
else
    echo "‚ùå AI bridge: unhealthy"
    exit 1
fi

echo "‚úÖ Core services running (some in placeholder mode)"
EOF

RUN chmod +x /health-check.sh

# Set final ownership
RUN chown -R cintara:cintara /home/cintara /app /models

# Expose ports
EXPOSE 26656 26657 1317 9090 8000 8080

# Health check
HEALTHCHECK --interval=60s --timeout=30s --start-period=60s --retries=3 \
    CMD /health-check.sh

# Start all services
CMD ["/unified-entrypoint.sh"]